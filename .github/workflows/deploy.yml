name: Deploy app to dev and prod
on: push

permissions:
  actions: read
  contents: write
  security-events: write
  packages: write
  id-token: write

jobs:
  analyze:
    name: Analyze
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'gradle'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: kotlin

      - name: Build gradle artifacts
        run: |
          ./gradlew shadowJar -x test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.READER_TOKEN }}

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  test:
    name: Test
    runs-on: ubuntu-latest
    permissions:
      contents: "read"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        id: setup-java
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: "gradle"
      - run: ./gradlew test
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.READER_TOKEN }}

  build:
    if: github.actor != 'dependabot[bot]'
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: "write"
      contents: "write"
      id-token: "write"
    outputs:
      image: ${{ steps.docker-build-push.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        id: setup-java
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: "gradle"
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - run: corepack enable
      - run: yarn --immutable
        env:
          NPM_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
        working-directory: web
      - run: yarn build
        working-directory: web
      - run: yarn copy
        working-directory: web
      - name: Build jar
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          ./gradlew shadowJar -x test
      - name: Generate and output SBOM
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
        uses: gradle/gradle-build-action@v3.5.0
        with:
          dependency-graph: generate-and-submit
          arguments: build
      - name: Push docker image to GAR
        uses: nais/docker-build-push@v0
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        id: docker-build-push
        with:
          team: teamsykmelding
          salsa: true
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}

  dependabot-build:
    if: github.actor == 'dependabot[bot]'
    name: Build
    runs-on: ubuntu-latest
    permissions:
      packages: "write"
      contents: "write"
      id-token: "write"
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        id: setup-java
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: "gradle"
      - uses: actions/setup-node@v4
        with:
          node-version: '22'
      - run: corepack enable
      - run: yarn --immutable
        env:
          NPM_AUTH_TOKEN: ${{ secrets.READER_TOKEN }}
        working-directory: web
      - run: yarn build
        working-directory: web
      - run: yarn copy
        working-directory: web
      - name: Build jar
        env:
          ORG_GRADLE_PROJECT_githubUser: x-access-token
          ORG_GRADLE_PROJECT_githubPassword: ${{ secrets.GITHUB_TOKEN }}
          COMMIT_SHA: ${{ github.sha }}
        run: |
          ./gradlew shadowJar -x test

  trivy-docker:
    if: github.actor != 'dependabot[bot]'
    permissions:
      contents: "write"
      id-token: "write"
      security-events: "write"
    name: Trivy docker
    runs-on: ubuntu-latest
    needs: [ build ]
    steps:
      - run: touch me
      - uses: nais/login@v0
        with:
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          team: teamsykmelding

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.29.0
        env:
          ACTIONS_RUNTIME_TOKEN: ${{ secrets.GITHUB_TOKEN  }}
        with:
          image-ref: ${{ needs.build.outputs.image }}
          ignore-unfixed: true
          vuln-type: 'os'
          severity: 'CRITICAL,HIGH'
          format: 'sarif'
          output: 'trivy-results.sarif'
          scanners: 'vuln'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  deploy-dev:
    if: github.actor != 'dependabot[bot]'
    name: Deploy to dev
    runs-on: ubuntu-latest
    needs: [ test, build ]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: dev-gcp
          RESOURCE: naiserator-dev.yaml
          VAR: image=${{ needs.build.outputs.image }},commit=${{ github.sha }},sourceVersionURL=https://github.com/${{ github.repository }}/tree/${{ github.sha }}

  deploy-prod:
    if: github.ref_name == 'main'
    name: Deploy to prod
    runs-on: ubuntu-latest
    needs: [ test, build ]
    steps:
      - uses: actions/checkout@v4
      - uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: prod-gcp
          RESOURCE: naiserator-prod.yaml
          VAR: image=${{ needs.build.outputs.image }},commit=${{ github.sha }},sourceVersionURL=https://github.com/${{ github.repository }}/tree/${{ github.sha }}
